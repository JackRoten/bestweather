# syntax = docker/dockerfile:1
# This Dockerfile uses multi-stage build to customize DEV and PROD images:
# https://docs.docker.com/develop/develop-images/multistage-build/
# Based off of Docker file:
# https://github.com/wemake-services/wemake-django-template/blob/master/%7B%7Bcookiecutter.project_name%7D%7D/docker/django/Dockerfile

# Use an official Python runtime as a parent image
FROM python:3.12-slim

LABEL maintainer="{{ cookiecutter.project_domain }}"
LABEL vendor="{{ cookiecutter.project_domain }}"

# `DJANGO_ENV` arg is used to make prod / dev builds:
ARG bestweather \
  # Needed for fixing permissions of files created by Docker:
  UID=1000 \
  GID=1000

ENV DJANGO_ENV=${bestweather} \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  POETRY_VERSION=1.0.0

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

# Set the working directory to /app
WORKDIR /bestweather

# Copy the current directory contents into the container at /app
COPY poetry.lock pyproject.toml /bestweather/

# Install any needed packages specified in pyproject.toml
RUN pip install poetry
RUN poetry install
# RUN apt-get update && apt-get upgrade -y \
#   && apt-get install --no-install-recommends -y \
#     bash \
#     brotli \
#     build-essential \
#     curl \
#     gettext \
#     git \
#     libpq-dev \
#     wait-for-it \
#   # Installing `tini` utility:
#   # https://github.com/krallin/tini
#   # Get architecture to download appropriate tini release:
#   # See https://github.com/wemake-services/wemake-django-template/issues/1725
#   && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
#   && curl -o /usr/local/bin/tini -sSLO "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${dpkgArch}" \
#   && chmod +x /usr/local/bin/tini && tini --version \
#   # Installing `poetry` package manager:
#   # https://github.com/python-poetry/poetry
#   && curl -sSL 'https://install.python-poetry.org' | python - \
#   && poetry --version \
#   # Cleaning cache:
#   && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
#   && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# Make port 80 available to the world outside this container
EXPOSE 80

# Creating folders, and files for a project:
# Copy only requirements, to cache them in docker layer
COPY --chown=web:web ./poetry.lock ./pyproject.toml /bestweather/

# Project initialization:
# hadolint ignore=SC2046
# RUN --mount=type=cache,target="$POETRY_CACHE_DIR" \
#   echo "$bestweather" \
#   && poetry version \
#   # Install deps:
#   && poetry run pip install -U pip \
#   && poetry install \
#     $(if [ "$bestweather" = 'production' ]; then echo '--only main'; fi) \
#     --no-interaction --no-ansi --sync
    
# This is a special case. We need to run this script as an entry point:
COPY ./docker/django/entrypoint.sh /docker-entrypoint.sh

# Setting up proper permissions:
RUN chmod +x '/docker-entrypoint.sh' \
  # Replacing line separator CRLF with LF for Windows users:
  && sed -i 's/\r$//g' '/docker-entrypoint.sh'

# Running as non-root user:
USER web

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]

# The following stage is only for production:
# https://wemake-django-template.readthedocs.io/en/latest/pages/template/production.html
# FROM development_build AS production_build
# COPY --chown=web:web . /code